unit ConexaoDAO;

interface

uses FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf,
  FireDAC.Stan.Async, FireDAC.DApt, Data.DB, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client, FireDAC.UI.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool,
  FireDAC.Phys, FireDAC.FMXUI.Wait, FireDAC.Phys.SQLite, FireDAC.Phys.SQLiteDef,
  FireDAC.Stan.ExprFuncs, FireDAC.Phys.SQLiteWrapper.Stat, SysUtils,
  Vcl.Forms, Windows;

type
  TConexaoDAO = class
    private
      class function VerificarBancoExiste() : String;

    public
      class function Conectar(var conexao : TFDConnection) : TFDConnection;
      class procedure CriarQuery(var query : TFDQuery; sender: TObject);
      class procedure DestruirQuery(var query : TFDQuery; sender: TObject);
  end;

implementation

{ TConexaoDAO }

class function TConexaoDAO.Conectar(var conexao: TFDConnection) : TFDConnection;
begin
  try
    if Assigned(conexao) then
      Result := conexao;

    conexao := TFDConnection.Create(nil);
    conexao.LoginPrompt := false;
    conexao.Params.Values['Database'] := VerificarBancoExiste();
    conexao.Params.Values['DriverID'] := 'SQLite';
    conexao.Connected := True;
  except on E: Exception do
    raise Exception.Create(E.Message);
  end;
end;

class procedure TConexaoDAO.CriarQuery(var query: TFDQuery; sender: TObject);
begin
  try
    query := TFDQuery.Create(sender);
    query.Connection := FormPrincipal.Conexao;
    query.Close;
    query.SQL.Clear;
  except on E: Exception do
    raise Exception.Create(E.Message);
  end;
end;

class procedure TConexaoDAO.DestruirQuery(var query: TFDQuery; sender: TObject);
begin

end;

class function TConexaoDAO.VerificarBancoExiste: String;
var
  vCaminho : string;
begin
  vCaminho := ExtractFileDir(Application.ExeName) + '\DB\ControleAbastecimento.db';
  if FileExists(vCaminho) then
    Result := vCaminho
  else
    raise Exception.Create('Não foi localizado o banco no caminho: ' + vCaminho);
end;

end.
